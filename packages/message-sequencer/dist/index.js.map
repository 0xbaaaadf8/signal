{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import now from \"performance-now\"\r\n\r\nexport interface Message<T> {\r\n  time: number // milliseconds\r\n  body: T\r\n}\r\n\r\nexport interface LiveMessage<T> extends Message<T> {\r\n  timestamp: number\r\n}\r\n\r\nexport interface Output<T> {\r\n  sendMessages(messages: LiveMessage<T>[], timestamp: number): void\r\n}\r\n\r\nexport interface DataSource<T> {\r\n  /**\r\n   * 指定した範囲の時間のメッセージを取得する\r\n   * @param from milliseconds\r\n   * @param to milliseconds\r\n   */\r\n  getMessages(from: number, to: number): Message<T>[]\r\n}\r\n\r\nexport interface LoopSetting {\r\n  begin: number,\r\n  end: number,\r\n  enabled: boolean\r\n}\r\n\r\n/**\r\n * Player でイベントを随時読み取るためのクラス\r\n * 精確にスケジューリングするために先読みを行う\r\n * https://www.html5rocks.com/ja/tutorials/audio/scheduling/\r\n * \r\n * これ自体はタイミングを指示するだけで、具体的な midi のメッセージ等を知らない\r\n * \r\n * Message[] @ DataSource -> LiveMessage[] @ Sequencer -> Output\r\n */\r\nexport default class Sequencer<T> {\r\n  private readonly dataSource: DataSource<T>\r\n  private readonly output: Output<T>\r\n\r\n  // タイマーの間隔\r\n  private readonly interval: number\r\n  \r\n  // 先読み時間\r\n  private readonly lookAhead: number\r\n\r\n  // 再生開始時刻\r\n  private startTime: number|null\r\n\r\n  // 再生開始時の相対時間\r\n  private startTimeRelative: number|null\r\n\r\n  // スケジュール済みの相対時間\r\n  private scheduledTime: number\r\n\r\n  private intervalId: any // Timer (node) or number (browser)\r\n  \r\n  loop: LoopSetting = {\r\n    begin: 0,\r\n    end: 0,\r\n    enabled: false\r\n  }\r\n\r\n  /**\r\n   * @param dataSource Message Source\r\n   * @param output Message Destination\r\n   * @param interval milliseconds\r\n   * @param lookAhead milliseconds\r\n   */\r\n  constructor(dataSource: DataSource<T>, output: Output<T>, interval: number, lookAhead: number) {\r\n    this.dataSource = dataSource\r\n    this.output = output\r\n    this.interval = interval\r\n    this.lookAhead = lookAhead\r\n  }\r\n\r\n  resume(): void {\r\n    if (this.intervalId < 0) {\r\n      this.intervalId = setInterval(() => this.onTimer(), this.interval)\r\n      this.startTime = null\r\n      this.startTimeRelative = null\r\n    }\r\n  }\r\n\r\n  seek(time: number): void {\r\n    this.scheduledTime = time\r\n    this.startTime = null\r\n    this.startTimeRelative = null\r\n  }\r\n\r\n  play(time: number): void {\r\n    this.seek(time)\r\n    this.resume()\r\n  }\r\n\r\n  pause(): void {\r\n    clearInterval(this.intervalId)\r\n    this.intervalId = -1\r\n  }\r\n\r\n  get isPlaying(): boolean {\r\n    return this.intervalId >= 0\r\n  } \r\n\r\n  /**\r\n   * 一定間隔で呼ばれ、先読みしながらメッセージを output に送信する\r\n   *  テスト用に公開\r\n   */ \r\n  onTimer(timestamp: number = now()): void {\r\n    if (this.startTime === null) {\r\n      this.startTime = timestamp\r\n    }\r\n    if (this.startTimeRelative === null) {\r\n      this.startTimeRelative = this.scheduledTime\r\n    }\r\n    const nowTime = this.startTimeRelative + timestamp - this.startTime\r\n\r\n    // 前回スケジュール済みの時点から、\r\n    // 先読み時間までを処理の対象とする\r\n    const fromTime = this.scheduledTime\r\n    const toTime = nowTime + this.lookAhead\r\n\r\n    const msgs: LiveMessage<T>[] = this.dataSource\r\n      .getMessages(fromTime, toTime)\r\n      .map(message => ({\r\n        ...message,\r\n        timestamp: timestamp + message.time - nowTime\r\n      }))\r\n\r\n    this.output.sendMessages(msgs, nowTime)\r\n\r\n    this.scheduledTime = toTime\r\n    \r\n    if (this.loop.enabled && toTime >= this.loop.end) {\r\n      this.seek(this.loop.begin)\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;AASA;;;;;;;IAiCE,mBAAY,UAAyB,EAAE,MAAiB,EAAE,QAAgB,EAAE,SAAiB;QAZ7F,SAAI,GAAgB;YAClB,KAAK,EAAE,CAAC;YACR,GAAG,EAAE,CAAC;YACN,OAAO,EAAE,KAAK;SACf,CAAA;QASC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACxB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;KAC3B;IAED,0BAAM,GAAN;QAAA,iBAMC;QALC,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE;YACvB,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,cAAM,OAAA,KAAI,CAAC,OAAO,EAAE,GAAA,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAA;YAClE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA;YACrB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAA;SAC9B;KACF;IAED,wBAAI,GAAJ,UAAK,IAAY;QACf,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA;QACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA;QACrB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAA;KAC9B;IAED,wBAAI,GAAJ,UAAK,IAAY;QACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,IAAI,CAAC,MAAM,EAAE,CAAA;KACd;IAED,yBAAK,GAAL;QACE,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAC9B,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAA;KACrB;IAED,sBAAI,gCAAS;aAAb;YACE,OAAO,IAAI,CAAC,UAAU,IAAI,CAAC,CAAA;SAC5B;;;OAAA;;;;;IAMD,2BAAO,GAAP,UAAQ,SAAyB;QAAzB,0BAAA,EAAA,YAAoB,GAAG,EAAE;QAC/B,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,EAAE;YAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;SAC3B;QACD,IAAI,IAAI,CAAC,iBAAiB,KAAK,IAAI,EAAE;YACnC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAA;SAC5C;QACD,IAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,GAAG,SAAS,GAAG,IAAI,CAAC,SAAS,CAAA;;;QAInE,IAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAA;QACnC,IAAM,MAAM,GAAG,OAAO,GAAG,IAAI,CAAC,SAAS,CAAA;QAEvC,IAAM,IAAI,GAAqB,IAAI,CAAC,UAAU;aAC3C,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC;aAC7B,GAAG,CAAC,UAAA,OAAO,IAAI,qBACX,OAAO,IACV,SAAS,EAAE,SAAS,GAAG,OAAO,CAAC,IAAI,GAAG,OAAO,OAC7C,CAAC,CAAA;QAEL,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;QAEvC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAA;QAE3B,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YAChD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SAC3B;KACF;IACH,gBAAC;CAAA,IAAA;;;;"}